<div class="alert alert-info">
  <%= link_to "Manage Kiosks", rails_admin.index_path('Kiosk'), class: 'btn btn-primary' %>
  <%= link_to "Manage Slides", rails_admin.index_path('slide'), class: "btn btn-primary mr-2" %>
  <%= link_to "Add New Slide", rails_admin.new_path('slide'),   class: "btn btn-success" %>
</div>

<% if Slide.fallbacks.none? %>
  <div class="alert alert-warning" style="margin-bottom:1em;">
    <strong>No fallback slides defined.</strong><br/>
    When a kiosk has no active slides, it will go blank.
    Please mark one or more slides as a fallback under
    <a href="<%= rails_admin.index_path('Slide') %>">Admin → Slides</a>.
  </div>
<% end %>

<%# ----- Date and preset logic ----- %>
<%
  today        = Date.current
  yesterday    = (today - 1.day)..(today - 1.day)
  last_7_days  = (today - 6.days)..today
  last_30_days = (today - 29.days)..today
  curr_month   = today.beginning_of_month..today
  prev_month   = (today - 1.month).beginning_of_month..(today - 1.month).end_of_month
  curr_year    = today.beginning_of_year..today
  prev_year    = today.last_year.beginning_of_year..today.last_year.end_of_year

  # Current range (fallback to last 30)
  start_date   = params[:start].present? ? Date.parse(params[:start]) : last_30_days.begin
  end_date     = params[:end].present?   ? Date.parse(params[:end])   : last_30_days.end

  presets = {
    "today"          => (today..today),
    "yesterday"      => yesterday,
    "last_7_days"    => last_7_days,
    "last_30_days"   => last_30_days,
    "current_month"  => curr_month,
    "previous_month" => prev_month,
    "current_year"   => curr_year,
    "previous_year"  => prev_year
  }

  # Detect current preset (or custom)
  param_preset     = params[:preset_range].presence
  detected_preset  = presets.find { |_k, r| r.begin == start_date && r.end == end_date }&.first
  selected_preset  = param_preset || detected_preset || "custom"

  # tiny helper for dropdown values
  def range_value(r) = "#{r.begin}|#{r.end}"

  sessions = KioskSession
    .includes(kiosk: :kiosk_group)
    .where(started_at: start_date.beginning_of_day..end_date.end_of_day)

  accessible_groups = current_user.admin? ? KioskGroup.all : current_user.kiosk_groups
  accessible_groups = accessible_groups.order(:name)
  group_ids_with_sessions = sessions.map { |s| s.kiosk&.kiosk_group_id }.compact.uniq
  available_groups = accessible_groups.where(id: group_ids_with_sessions)

  all_key   = current_user.admin? ? "all_kiosks" : "all_my_kiosks"
  all_label = current_user.admin? ? "All Kiosks" : "All My Kiosks"

  group_choices = available_groups.map { |g| [g.name, g.id.to_s] }
  dropdown_options = [[all_label, all_key]] + group_choices

  param_selected_group = params[:kiosk_group]
  valid_option = dropdown_options.any? { |(_, val)| val == param_selected_group }
  selected_group = valid_option ? param_selected_group : all_key

  sessions_to_show =
    if selected_group == "all_kiosks" && current_user.admin?
      sessions
    elsif selected_group == "all_my_kiosks"
      my_ids = current_user.kiosk_groups.pluck(:id)
      sessions.select { |s| s.kiosk && my_ids.include?(s.kiosk.kiosk_group_id) }
    else
      group = available_groups.find { |g| g.id.to_s == selected_group }
      group ? sessions.select { |s| s.kiosk&.kiosk_group_id == group.id } : []
    end

  if selected_group == all_key
    grouped = sessions_to_show.group_by { |s| s.kiosk&.kiosk_group }
      .transform_values do |group_sessions|
        group_sessions.group_by { |s| s.kiosk&.name || s.kiosk_code }
          .transform_values { |kiosk_sessions| kiosk_sessions.group_by(&:host) }
      end
  else
    grouped = sessions_to_show.group_by { |s| s.kiosk&.name || s.kiosk_code }
      .transform_values { |kiosk_sessions| kiosk_sessions.group_by(&:host) }
  end

  single_day = (start_date == end_date)
%>

<div class="card mt-4">
  <div class="card-header">
    <h5 class="mb-0">Kiosk Usage (<%= start_date.strftime("%Y-%m-%d") %> to <%= end_date.strftime("%Y-%m-%d") %>)</h5>
  </div>
  <div class="card-body">
    <%= form_with url: rails_admin.dashboard_path, method: :get, local: true, class: "form-inline mb-2", id: "filtersForm" do %>
      <label class="mr-2 font-weight-bold">Kiosk Group:</label>
      <%= select_tag :kiosk_group,
            options_for_select(dropdown_options, selected_group),
            class: "form-control mr-3",
            onchange: "this.form.requestSubmit();" %>

      <label class="mr-2 font-weight-bold">Date Range:</label>
      <%= select_tag :preset_range,
            options_for_select([
              ['Today',            "today:#{range_value(presets['today'])}"],
              ['Yesterday',        "yesterday:#{range_value(presets['yesterday'])}"],
              ['Last 7 Days',      "last_7_days:#{range_value(presets['last_7_days'])}"],
              ['Last 30 Days',     "last_30_days:#{range_value(presets['last_30_days'])}"],
              ['Current Month',    "current_month:#{range_value(presets['current_month'])}"],
              ['Previous Month',   "previous_month:#{range_value(presets['previous_month'])}"],
              ['Current Year',     "current_year:#{range_value(presets['current_year'])}"],
              ['Previous Year',    "previous_year:#{range_value(presets['previous_year'])}"],
              ['Custom…',          "custom:"]
            ].map { |label, val|
              key = val.split(':',2).first
              [label, val, { selected: (key == selected_preset) }]
            }),
            class: "form-control mr-3",
            id: "presetRange",
            onchange: "applyPresetRange(this)" %>

      <span id="customDates" style="<%= selected_preset == 'custom' ? '' : 'display:none' %>">
        <label class="mr-2 font-weight-bold">Start:</label>
        <%= date_field_tag :start, start_date, class: "form-control mr-2" %>
        <label class="mr-2 font-weight-bold">End:</label>
        <%= date_field_tag :end, end_date, class: "form-control mr-2" %>
        <%= submit_tag "Apply", class: "btn btn-primary" %>
      </span>
    <% end %>

    <script>
      function applyPresetRange(select) {
        const form = document.getElementById('filtersForm');
        const custom = document.getElementById('customDates');
        const [key, pair] = (select.value || '').split(':', 2);

        // Keep preset in params
        const hidden = ensureHidden(form, 'preset_range');
        hidden.value = key;

        if (key === 'custom') {
          custom.style.display = '';
          return;
        }

        custom.style.display = 'none';
        const [start, end] = (pair || '').split('|');
        setInputValue(form, 'start', start);
        setInputValue(form, 'end', end);
        form.requestSubmit();
      }

      function setInputValue(form, name, val) {
        let input = form.querySelector(`[name="${name}"]`);
        if (!input) {
          input = document.createElement('input');
          input.type = 'hidden';
          input.name = name;
          form.appendChild(input);
        }
        input.value = val;
      }

      function ensureHidden(form, name) {
        let input = form.querySelector(`input[type="hidden"][name="${name}"]`);
        if (!input) {
          input = document.createElement('input');
          input.type = 'hidden';
          input.name = name;
          form.appendChild(input);
        }
        return input;
      }

      document.addEventListener('turbo:load', syncCustomDatesVisibility);
      document.addEventListener('DOMContentLoaded', syncCustomDatesVisibility);
      function syncCustomDatesVisibility() {
        const select = document.getElementById('presetRange');
        if (!select) return;
        const key = (select.value || '').split(':', 1)[0];
        const custom = document.getElementById('customDates');
        if (custom) custom.style.display = (key === 'custom') ? '' : 'none';
        const form = document.getElementById('filtersForm');
        if (form) {
          const hidden = ensureHidden(form, 'preset_range');
          hidden.value = key;
        }
      }
    </script>

    <% if grouped.any? %>
      <% if selected_group == all_key %>
        <div class="accordion" id="kioskGroupAccordion">
          <% grouped.each_with_index do |(group, kiosks), i| %>
            <% group_obj = group || OpenStruct.new(name: "No Group", slug: nil) %>
            <% group_id = "kioskGroup#{i}" %>
            <% group_session_count = kiosks.values.flat_map(&:values).flatten.size %>
            <% sessions_flat = kiosks.values.flat_map(&:values).flatten %>
            <%# --- Chart Data --- %>
            <% if single_day %>
              <% hours = (0..23).to_a %>
              <% hour_counts = hours.map { |h| sessions_flat.count { |s| s.started_at.hour == h && s.started_at.to_date == start_date } } %>
              <% chart_labels = hours.map { |h| "#{h}:00" } %>
              <% chart_data = hour_counts %>
            <% else %>
              <% days = (start_date..end_date).to_a %>
              <% day_counts = days.map { |d| sessions_flat.count { |s| s.started_at.to_date == d } } %>
              <% chart_labels = days.map { |d| d.strftime("%b %-d") } %>
              <% chart_data = day_counts %>
            <% end %>
            <div class="accordion-item">
              <h2 class="accordion-header" id="<%= "#{group_id}Header" %>">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                        data-bs-target="#<%= group_id %>" aria-expanded="false" aria-controls="<%= group_id %>">
                  <%= group_obj.name %> (<%= group_session_count %> sessions)
                </button>
              </h2>
              <div id="<%= group_id %>" class="accordion-collapse collapse" aria-labelledby="<%= "#{group_id}Header" %>"
                   data-bs-parent="#kioskGroupAccordion">
                <div class="accordion-body">
                  <div>
                    <canvas id="chart-<%= group_id %>" height="70"></canvas>
                  </div>
                  <script>
                    document.addEventListener('turbo:load', function() {
                      var ctx = document.getElementById('chart-<%= group_id %>');
                      if (ctx) {
                        if (ctx.chartInstance) { ctx.chartInstance.destroy(); }
                        ctx.chartInstance = new Chart(ctx, {
                          type: 'line',
                          data: {
                            labels: <%= raw chart_labels.to_json %>,
                            datasets: [{
                              label: 'Sessions',
                              data: <%= raw chart_data.to_json %>,
                              fill: false,
                              borderColor: 'rgb(54, 162, 235)',
                              tension: 0.15,
                              pointRadius: 2
                            }]
                          },
                          options: {
                            responsive: true,
                            plugins: { legend: { display: false } },
                            scales: {
                              y: { beginAtZero: true, ticks: { precision: 0 } }
                            }
                          }
                        });
                      }
                    });
                  </script>
                  <% kiosks.each do |kiosk_name, hosts| %>
                    <% kiosk_session_count = hosts.values.flatten.size %>
                    <h6 class="mt-3"><%= kiosk_name %> (<%= kiosk_session_count %> sessions)</h6>
                    <table class="table table-sm mb-4">
                      <thead>
                        <tr>
                          <th>Host</th>
                          <th>Sessions</th>
                          <th>First Session</th>
                          <th>Last Session</th>
                          <th>Utilization</th>
                          <th>Avg Duration</th>
                          <th>Total Minutes</th>
                        </tr>
                      </thead>
                      <tbody>
                        <% hosts.sort.each do |host, host_sessions| %>
                          <% durations = host_sessions.map(&:session_duration).compact %>
                          <% total_min = durations.any? ? (durations.sum / 60.0) : 0 %>
                          <% location = group_obj.slug && location_for_group_slug(group_obj.slug) %>
                          <% open_min = location ? open_minutes_for_range(location, start_date, end_date) : nil %>
                          <% util_pct = (open_min && open_min > 0) ? (total_min / open_min * 100).round(1) : nil %>
                          <tr>
                            <td><%= host %></td>
                            <td><%= host_sessions.count %></td>
                            <td><%= host_sessions.map(&:started_at).min&.strftime("%Y-%m-%d %H:%M") %></td>
                            <td><%= host_sessions.map(&:ended_at).compact.max&.strftime("%Y-%m-%d %H:%M") %></td>
                            <td><%= util_pct ? "#{util_pct}%" : "&mdash;".html_safe %></td>
                            <td><%= durations.any? ? "#{(durations.sum / durations.size / 60).round(1)} min" : "-" %></td>
                            <td><%= durations.any? ? total_min.round(1) : "-" %></td>
                          </tr>
                        <% end %>
                      </tbody>
                    </table>
                  <% end %>
                </div>
              </div>
            </div>
          <% end %>
        </div>
      <% else %>
        <% grouped.each_with_index do |(kiosk_name, hosts), k| %>
          <% kiosk_session_count = hosts.values.flatten.size %>
          <% kiosk_sessions = hosts.values.flatten %>
          <% if single_day %>
            <% hours = (0..23).to_a %>
            <% hour_counts = hours.map { |h| kiosk_sessions.count { |s| s.started_at.hour == h && s.started_at.to_date == start_date } } %>
            <% chart_labels = hours.map { |h| "#{h}:00" } %>
            <% chart_data = hour_counts %>
          <% else %>
            <% days = (start_date..end_date).to_a %>
            <% day_counts = days.map { |d| kiosk_sessions.count { |s| s.started_at.to_date == d } } %>
            <% chart_labels = days.map { |d| d.strftime("%b %-d") } %>
            <% chart_data = day_counts %>
          <% end %>
          <div class="mt-4">
            <div>
              <canvas id="chart-kiosk-<%= k %>" height="70"></canvas>
            </div>
            <script>
              document.addEventListener('turbo:load', function() {
                var ctx = document.getElementById('chart-kiosk-<%= k %>');
                if (ctx) {
                  if (ctx.chartInstance) { ctx.chartInstance.destroy(); }
                  ctx.chartInstance = new Chart(ctx, {
                    type: 'line',
                    data: {
                      labels: <%= raw chart_labels.to_json %>,
                      datasets: [{
                        label: 'Sessions',
                        data: <%= raw chart_data.to_json %>,
                        fill: false,
                        borderColor: 'rgb(54, 162, 235)',
                        tension: 0.15,
                        pointRadius: 2
                      }]
                    },
                    options: {
                      responsive: true,
                      plugins: { legend: { display: false } },
                      scales: {
                        y: { beginAtZero: true, ticks: { precision: 0 } }
                      }
                    }
                  });
                }
              });
            </script>
            <h6 class="border-bottom pb-1"><%= kiosk_name %> (<%= kiosk_session_count %> sessions)</h6>
            <table class="table table-sm mb-4">
              <thead>
                <tr>
                  <th>Host</th>
                  <th>Sessions</th>
                  <th>First Session</th>
                  <th>Last Session</th>
                  <th>Utilization</th>
                  <th>Avg Duration</th>
                  <th>Total Minutes</th>
                </tr>
              </thead>
              <tbody>
                <% hosts.sort.each do |host, host_sessions| %>
                  <% durations = host_sessions.map(&:session_duration).compact %>
                  <% total_min = durations.any? ? (durations.sum / 60.0) : 0 %>
                  <% kiosk_obj = host_sessions.first.kiosk %>
                  <% group_obj = kiosk_obj&.kiosk_group %>
                  <% location = group_obj&.slug && location_for_group_slug(group_obj.slug) %>
                  <% open_min = location ? open_minutes_for_range(location, start_date, end_date) : nil %>
                  <% util_pct = (open_min && open_min > 0) ? (total_min / open_min * 100).round(1) : nil %>
                  <tr>
                    <td><%= host %></td>
                    <td><%= host_sessions.count %></td>
                    <td><%= host_sessions.map(&:started_at).min&.strftime("%Y-%m-%d %H:%M") %></td>
                    <td><%= host_sessions.map(&:ended_at).compact.max&.strftime("%Y-%m-%d %H:%M") %></td>
                    <td><%= util_pct ? "#{util_pct}%" : "&mdash;".html_safe %></td>
                    <td><%= durations.any? ? "#{(durations.sum / durations.size / 60).round(1)} min" : "-" %></td>
                    <td><%= durations.any? ? total_min.round(1) : "-" %></td>
                  </tr>
                <% end %>
              </tbody>
            </table>
          </div>
        <% end %>
      <% end %>
    <% else %>
      <div class="mt-3">
        <em>No data for selected range and group.</em>
      </div>
    <% end %>
  </div>
</div>
